# .github/workflows/reusable-deploy-package.yml
name: Deploy Prerelease Package

on:
  workflow_call:
    inputs:
      node_version:
        required: false
        type: string
        default: '18.17'
      runs_on:
        description: 'github runner operating system image version'
        default: 'ubuntu-latest'
        required: false
        type: string
      registry_url:
        required: false
        type: string
        default: 'https://npm.pkg.github.com'
    secrets:
      APPLICATION_ACCESS_TOKEN:
        description: 'GitHub Access Token'
        required: true
      NPM_TOKEN:
        description: 'NPM Token'
        required: true

jobs:
  check_changeset_files:
    runs-on: ubuntu-latest
    outputs:
      changeset_exists: ${{ steps.check.outputs.changeset_exists }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Check for Changeset Files
        id: check
        run: |
          if [ $(find .changeset -type f -name '*.md' ! -name 'README.md' | wc -l) -gt 0 ]; then
            echo "changeset_exists=true" >> $GITHUB_OUTPUT
          else
            echo "changeset_exists=false" >> $GITHUB_OUTPUT
          fi

  prerelease_packages:
    name: Create Pre-Release Packages if required
    runs-on: ${{ inputs.runs_on }}
    needs: check_changeset_files
    if: needs.check_changeset_files.outputs.changeset_exists == 'true'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          node-version: ${{ inputs.node_version }}
          registry-url: ${{ inputs.registry_url }}

      - name: Install Dependencies
        run: npm i
        env:
          NODE_AUTH_TOKEN: ${{ secrets.APPLICATION_ACCESS_TOKEN }}

      - name: Build
        run: npm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.APPLICATION_ACCESS_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.APPLICATION_ACCESS_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Changeset Prerelease - Version
        run: |
          npx changeset pre enter next
          npx changeset version
          npx changeset pre exit next
      
      - name: Update 'next' prerelease versions, if applicable
        run: |
          node -e "
          const fs = require('fs');
          const util = require('util');
          const exec = util.promisify(require('child_process').exec);
          async function findPackageJsonFiles(dir, allFiles = []) {
            const files = await fs.promises.readdir(dir, { withFileTypes: true });
            for(const file of files) {
              if (file.isDirectory()) {
                if (file.name !== 'node_modules') {
                  await findPackageJsonFiles(\`\${dir}/\${file.name}\`, allFiles);
                }
              } else if (file.name === 'package.json') {
                allFiles.push(\`\${dir}/\${file.name}\`);
              }
            };
            return allFiles;
          }
      
          async function versionExists(packageName, version) {
            try {
              const { stdout } = await exec(\`npm show \${packageName}@\${version} version\`);
              return stdout.trim() === version;
            } catch (error) {
              return false; // If the command fails, assume the version does not exist
            }
          }
      
          function incrementNextVersion(version) {
            const parts = version.split('-next.');
            const nextNumber = parseInt(parts[1]) + 1;
            return \`\${parts[0]}-next.\${nextNumber}\`;
          }
      
          async function updateVersionsInPackageJson(files) {
            let updatedPackages = {};
            for (const file of files) {
              const packageJson = JSON.parse(fs.readFileSync(file, 'utf-8'));
              if (packageJson.version && packageJson.version.includes('-next.')) {
                let currentVersion = packageJson.version;
                while (await versionExists(packageJson.name, currentVersion)) {
                  currentVersion = incrementNextVersion(currentVersion);
                }
                packageJson.version = currentVersion;
                fs.writeFileSync(file, JSON.stringify(packageJson, null, 2));
                console.log(\`Updated \${file} to version \${currentVersion}\`);
                updatedPackages[packageJson.name] = currentVersion;
              }
            }
            // Now update any dependencies, devDependencies, or peerDependencies
            for (const file of files) {
                const packageJson = JSON.parse(fs.readFileSync(file, 'utf-8'));
                let hasChanged = false;
                ['dependencies', 'devDependencies', 'peerDependencies'].forEach(type => {
                    if (packageJson[type]) {
                        Object.keys(packageJson[type]).forEach(dep => {
                            if (updatedPackages[dep]) {
                                packageJson[type][dep] = \`^\${updatedPackages[dep]}\`;
                                hasChanged = true;
                            }
                        });
                    }
                });
                if (hasChanged) {
                    fs.writeFileSync(file, JSON.stringify(packageJson, null, 2));
                    console.log(\`Updated dependencies in \${file}\`);
                }
            }
          }
      
          async function main() {
            const packageFiles = await findPackageJsonFiles('.');
            await updateVersionsInPackageJson(packageFiles);
          }
      
          main();
          "
        env:
          NODE_AUTH_TOKEN: ${{ secrets.APPLICATION_ACCESS_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.APPLICATION_ACCESS_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Changeset Prerelease - Publish
        run: |
          npx changeset pre enter next
          npx changeset publish > publish-output.txt
          npx changeset pre exit next
        env:
          NODE_AUTH_TOKEN: ${{ secrets.APPLICATION_ACCESS_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.APPLICATION_ACCESS_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const output = fs.readFileSync('publish-output.txt', 'utf8');
            const newTagLines = output.split('\n').filter(line => line.includes('New tag')).join('\n');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ğŸš€ Published Packages:\n\n${newTagLines}`
            });